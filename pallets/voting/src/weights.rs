
//! Autogenerated weights for `pallet_voting`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-06-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --steps
// 50
// --repeat
// 20
// --pallet
// pallet_voting
// --extrinsic
// *
// --output
// ./pallets/voting/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
pub use frame_system::weights::SubstrateWeight;
use core::marker::PhantomData;
use crate::WeightInfo as PalletWeightInfo;

/// Weight functions for `pallet_voting`.


pub trait WeightInfo {
	fn create_proposal(d: u32) -> Weight;
	fn vote(d: u32) -> Weight;
	fn on_initialize() -> Weight;
}


pub struct Substrate<T>(PhantomData<T>);
impl<T: frame_system::Config> PalletWeightInfo for SubstrateWeight<T> {
	/// Storage: `VotingModule::NextProposalId` (r:1 w:1)
	/// Proof: `VotingModule::NextProposalId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `VotingModule::ProposalsToFinalize` (r:1 w:1)
	/// Proof: `VotingModule::ProposalsToFinalize` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `VotingModule::Proposals` (r:0 w:1)
	/// Proof: `VotingModule::Proposals` (`max_values`: None, `max_size`: Some(331), added: 2806, mode: `MaxEncodedLen`)
	/// The range of component `d` is `[0, 256]`.
	fn create_proposal(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3464`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_769_841, 0)
			.saturating_add(Weight::from_parts(0, 3464))
			// Standard Error: 323
			.saturating_add(Weight::from_parts(63, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `VotingModule::Proposals` (r:1 w:1)
	/// Proof: `VotingModule::Proposals` (`max_values`: None, `max_size`: Some(331), added: 2806, mode: `MaxEncodedLen`)
	/// Storage: `VotingModule::Votes` (r:1 w:1)
	/// Proof: `VotingModule::Votes` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	/// The range of component `d` is `[0, 256]`.
	fn vote(d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `165 + d * (1 Â±0)`
		//  Estimated: `3796`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_711_858, 0)
			.saturating_add(Weight::from_parts(0, 3796))
			// Standard Error: 322
			.saturating_add(Weight::from_parts(1_114, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `VotingModule::Proposals` (r:101 w:100)
	/// Proof: `VotingModule::Proposals` (`max_values`: None, `max_size`: Some(331), added: 2806, mode: `MaxEncodedLen`)
	fn on_initialize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `33945`
		//  Estimated: `284396`
		// Minimum execution time: 746_000_000 picoseconds.
		Weight::from_parts(790_000_000, 0)
			.saturating_add(Weight::from_parts(0, 284396))
			.saturating_add(T::DbWeight::get().reads(101))
			.saturating_add(T::DbWeight::get().writes(100))
	}
}
